// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "go-boilerplate/internal/model"
	reflect "reflect"
)

// MockPostUsecase is a mock of PostUsecase interface
type MockPostUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPostUsecaseMockRecorder
}

// MockPostUsecaseMockRecorder is the mock recorder for MockPostUsecase
type MockPostUsecaseMockRecorder struct {
	mock *MockPostUsecase
}

// NewMockPostUsecase creates a new mock instance
func NewMockPostUsecase(ctrl *gomock.Controller) *MockPostUsecase {
	mock := &MockPostUsecase{ctrl: ctrl}
	mock.recorder = &MockPostUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostUsecase) EXPECT() *MockPostUsecaseMockRecorder {
	return m.recorder
}

// GetPosts mocks base method
func (m *MockPostUsecase) GetPosts(ctx context.Context) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts
func (mr *MockPostUsecaseMockRecorder) GetPosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostUsecase)(nil).GetPosts), ctx)
}

// CreatePost mocks base method
func (m *MockPostUsecase) CreatePost(ctx context.Context, req model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost
func (mr *MockPostUsecaseMockRecorder) CreatePost(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostUsecase)(nil).CreatePost), ctx, req)
}
